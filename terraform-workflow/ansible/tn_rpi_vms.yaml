# ACI playbook - Create Tenant prod including networking and contracts
---

- name: Create Tenant prod
  hosts: fab2
  connection: local
  gather_facts: no

  vars:
    aci_login: &aci_login
      host: "{{ ansible_host }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password | default(omit) }}"
      private_key: "{{ aci_private_key | default(omit) }}"
      certificate_name: "{{ aci_certificate_name | default(omit) }}"
      validate_certs: "{{ aci_validate_certs }}"
      annotation: "orchestrator:ansible"
      state: present

  vars_files:
    - ./tn_rpi_vms_vars.yaml

  tasks:
    - name: Add Tenant
      cisco.aci.aci_tenant:
        <<: *aci_login
        tenant: "{{ tenant_name }}"

    - name: Add VRF
      cisco.aci.aci_vrf:
        <<: *aci_login
        vrf: "{{ vrf_name }}"
        tenant: "{{ tenant_name }}"
        policy_control_preference: enforced
        policy_control_direction: ingress

    - name: Add Bridge Domains
      cisco.aci.aci_bd:
        <<: *aci_login
        tenant: "{{ tenant_name }}"
        bd: "{{ item.name }}"
        vrf: "{{ vrf_name }}"
        l2_unknown_unicast: "{{ 'proxy' if (item.mode == 'L3') else 'flood' }}"
        arp_flooding: yes
        enable_routing: "{{ 'yes' if (item.mode == 'L3') else 'no' }}"
      loop: "{{ bridge_domains }}"

    - name: Add subnets
      cisco.aci.aci_bd_subnet:
        <<: *aci_login
        tenant: "{{ tenant_name }}"
        bd: "{{ item.name }}"
        gateway: "{{ item.gateway.split('/')[0] }}"
        mask: "{{ item.gateway.split('/')[1] }}"
        scope: "{{ item.scope }}"
      loop: "{{ bridge_domains }}"
      when: item.mode == 'L3'

    - name: Add Application Profile
      cisco.aci.aci_ap:
        <<: *aci_login
        tenant: "{{ tenant_name }}"
        ap: "{{ app_name }}"

    - name: Add EPG
      cisco.aci.aci_epg:
        <<: *aci_login
        tenant: "{{ tenant_name }}"
        ap: "{{ app_name }}"
        epg: "{{ item.name }}"
        bd: "{{ item.bd }}"
        preferred_group: "{{ item.prefGroup }}"
      loop: "{{ epgs }}"

    - name: Add domain binding
      cisco.aci.aci_epg_to_domain:
        <<: *aci_login
        tenant: "{{ tenant_name }}"
        ap: "{{ app_name }}"
        epg: "{{ item.0.name }}"
        domain: "{{ item.1.domain }}"
        domain_type: "{{ item.1.type }}"
        vm_provider: "{{ item.1.provider | default(omit) }}"
      loop: "{{ epgs | subelements('domains', skip_missing=True) }}"

    # Contract Definition

#    - name: Add filters
#      cisco.aci.aci_filter:
#        <<: *aci_login
#        tenant: "{{ tenant_name }}"
#        filter: "{{ item.name }}"
#      loop: "{{ filters }}"
#
#    - name: Create a filter entry
#      cisco.aci.aci_filter_entry:
#        <<: *aci_login
#        tenant: "{{ tenant_name }}"
#        entry: "{{ item.name }}"
#        filter: "{{ item.name }}"
#        ether_type: "{{ item.ether_type  }}"
#        ip_protocol: "{{ item.ip_protocol }}"
#        dst_port_start: "{{ item.dst_port_start | default(omit) }}"
#        dst_port_end: "{{ item.dst_port_end | default(omit) }}"
#      loop: "{{ filters }}"
#

#    - name: Add contracts
#      cisco.aci.aci_contract:
#        <<: *aci_login
#        tenant: "{{ tenant_name }}"
#        contract: "{{ item.name }}"
#        description: "{{ item.descr }}"
#        scope: "{{ item.scope }}"
#      loop: "{{ contracts }}"
#
#    - name: Add contract subjects
#      cisco.aci.aci_contract_subject:
#        <<: *aci_login
#        tenant: "{{ tenant_name }}"
#        contract: "{{ item.name }}"
#        subject: "{{ item.subject }}"
#        reverse_filter: "{{ item.reverse_filter }}"
#      loop: "{{ contracts }}"
#
#    - name: Bind filters to contract subjects
#      cisco.aci.aci_contract_subject_to_filter:
#        <<: *aci_login
#        tenant: "{{ tenant_name }}"
#        contract: "{{ item.0.name }}"
#        subject: "{{ item.0.subject }}"
#        filter: "{{ item.1 }}"
#        log: log
#      loop: "{{ contracts | subelements('filters') }}"
#